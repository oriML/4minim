'use server';

import { googleSheetService } from "@/services/google-sheets";
import { revalidatePath } from "next/cache";
import { Order, Product } from "@/core/types";
import { redirect } from "next/navigation";
import { productImageService } from '@/services/product-image';

export async function updateOrderStatus(orderId: string, newStatus: Order['status']) {
  try {
    await googleSheetService.updateOrder(orderId, { status: newStatus });
    revalidatePath("/admin/dashboard");
    return { success: true };
  } catch (error) {
    console.error("Failed to update order status:", error);
    return { success: false, error: "עדכון סטטוס הזמנה נכשל." };
  }
}

export async function updateOrderPaymentStatus(orderId: string, newStatus: Order['paymentStatus']) {
  try {
    await googleSheetService.updateOrder(orderId, { paymentStatus: newStatus });
    revalidatePath("/admin/dashboard");
    return { success: true };
  } catch (error) {
    console.error("Failed to update order payment status:", error);
    return { success: false, error: "עדכון סטטוס תשלום נכשל." };
  }
}

export async function deleteProductAction(productId: string) {
  try {
    await googleSheetService.deleteProduct(productId);
    revalidatePath("/admin/dashboard");
    revalidatePath("/admin/products");
    return { success: true };
  } catch (error) {
    console.error("Failed to delete product:", error);
    return { success: false, error: "מחיקת מוצר נכשלה." };
  }
}

export async function createProductAction(formData: FormData) {
  try {
    const imageFile = formData.get("image") as File | null;
    let imageUrl: string | undefined;

    if (imageFile && imageFile.size > 0) {
      imageUrl = await productImageService.uploadProductImage(imageFile, 'new-product'); // 'new-product' is a placeholder, actual ID will be generated by googleSheetService
    }

    const productData = {
      productName_HE: formData.get("productName_HE") as string,
      productName_EN: formData.get("productName_EN") as string,
      description: formData.get("description") as string,
      price: parseFloat(formData.get("price") as string),
      category: formData.get("category") as Product['category'],
      imageURL: imageUrl || (formData.get("imageUrl") as string), // Use uploaded URL or existing if no new upload
    };

    await googleSheetService.addProduct(productData);
    revalidatePath("/admin/products");
    revalidatePath("/admin/dashboard");
  } catch (error) {
    console.error("Failed to create product:", error);
    return { success: false, error: "יצירת מוצר חדש נכשלה." };
  }
  redirect("/admin/products");
}

export async function updateProductAction(formData: FormData) {
  try {
    const productId = formData.get("productId") as string;
    const imageFile = formData.get("image") as File | null;
    let imageUrl: string | undefined;

    if (imageFile && imageFile.size > 0) {
      imageUrl = await productImageService.uploadProductImage(imageFile, productId);
    }

    const productData = {
      productName_HE: formData.get("productName_HE") as string,
      productName_EN: formData.get("productName_EN") as string,
      description: formData.get("description") as string,
      price: parseFloat(formData.get("price") as string),
      category: formData.get("category") as Product['category'],
      imageURL: imageUrl || (formData.get("imageUrl") as string), // Use uploaded URL or existing if no new upload
    };

    await googleSheetService.updateProduct(productId, productData);
    revalidatePath("/admin/products");
    revalidatePath("/admin/dashboard");
  } catch (error) {
    console.error("Failed to update product:", error);
    return { success: false, error: "עדכון מוצר נכשל." };
  }
  redirect("/admin/products");
}